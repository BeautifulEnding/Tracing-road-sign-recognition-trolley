// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module segment (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state4 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] p_src_data_stream_V_dout;
input   p_src_data_stream_V_empty_n;
output   p_src_data_stream_V_read;
output  [30:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_data_stream_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_322;
reg   [19:0] indvar_flatten_reg_84;
reg   [31:0] sum_1_reg_95;
wire   [0:0] exitcond_flatten_fu_107_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [19:0] indvar_flatten_next_fu_113_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] p_sum_1_fu_131_p3;
wire   [0:0] tmp_1_fu_165_p2;
reg   [0:0] tmp_1_reg_336;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_3_fu_197_p2;
reg   [0:0] tmp_3_reg_344;
wire   [0:0] tmp_5_fu_229_p2;
reg   [0:0] tmp_5_reg_350;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [0:0] tmp_8_fu_119_p2;
wire   [31:0] sum_fu_125_p2;
wire   [31:0] tmp_fu_139_p2;
wire   [0:0] abscond_fu_151_p2;
wire   [31:0] neg_fu_145_p2;
wire   [31:0] abs_fu_157_p3;
wire   [31:0] tmp_2_fu_171_p2;
wire   [0:0] abscond1_fu_183_p2;
wire   [31:0] neg9_fu_177_p2;
wire   [31:0] abs1_fu_189_p3;
wire   [31:0] tmp_4_fu_203_p2;
wire   [0:0] abscond2_fu_215_p2;
wire   [31:0] neg1_fu_209_p2;
wire   [31:0] abs2_fu_221_p3;
wire    ap_CS_fsm_state5;
wire   [0:0] sel_tmp1_fu_245_p2;
wire   [0:0] sel_tmp6_demorgan_fu_255_p2;
wire   [0:0] sel_tmp6_fu_259_p2;
wire   [0:0] sel_tmp7_fu_265_p2;
wire   [0:0] sel_tmp2_fu_250_p2;
wire   [0:0] tmp_s_fu_239_p2;
wire   [0:0] or_cond_fu_278_p2;
wire   [1:0] newSel_fu_270_p3;
wire   [1:0] newSel1_fu_284_p3;
wire   [1:0] newSel3_fu_296_p3;
wire   [0:0] or_cond2_fu_291_p2;
wire   [0:0] or_cond4_fu_308_p2;
wire   [30:0] newSel3_cast_fu_304_p1;
wire   [30:0] tmp_6_fu_235_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_107_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_84 <= indvar_flatten_next_fu_113_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_84 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_322 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_1_reg_95 <= p_sum_1_fu_131_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_1_reg_95 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_322 <= exitcond_flatten_fu_107_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_1_reg_336 <= tmp_1_fu_165_p2;
        tmp_3_reg_344 <= tmp_3_fu_197_p2;
        tmp_5_reg_350 <= tmp_5_fu_229_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_107_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_322 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_V_blk_n = p_src_data_stream_V_empty_n;
    end else begin
        p_src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_322 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_V_read = 1'b1;
    end else begin
        p_src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_107_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_107_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs1_fu_189_p3 = ((abscond1_fu_183_p2[0:0] === 1'b1) ? tmp_2_fu_171_p2 : neg9_fu_177_p2);

assign abs2_fu_221_p3 = ((abscond2_fu_215_p2[0:0] === 1'b1) ? tmp_4_fu_203_p2 : neg1_fu_209_p2);

assign abs_fu_157_p3 = ((abscond_fu_151_p2[0:0] === 1'b1) ? tmp_fu_139_p2 : neg_fu_145_p2);

assign abscond1_fu_183_p2 = (($signed(tmp_2_fu_171_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign abscond2_fu_215_p2 = (($signed(tmp_4_fu_203_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign abscond_fu_151_p2 = (($signed(tmp_fu_139_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_flatten_reg_322 == 1'd0) & (p_src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_flatten_reg_322 == 1'd0) & (p_src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_322 == 1'd0) & (p_src_data_stream_V_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = ((or_cond4_fu_308_p2[0:0] === 1'b1) ? newSel3_cast_fu_304_p1 : tmp_6_fu_235_p1);

assign exitcond_flatten_fu_107_p2 = ((indvar_flatten_reg_84 == 20'd921600) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_113_p2 = (indvar_flatten_reg_84 + 20'd1);

assign neg1_fu_209_p2 = (32'd76797 - sum_1_reg_95);

assign neg9_fu_177_p2 = (32'd60320 - sum_1_reg_95);

assign neg_fu_145_p2 = (32'd32850 - sum_1_reg_95);

assign newSel1_fu_284_p3 = ((tmp_1_reg_336[0:0] === 1'b1) ? 2'd2 : 2'd0);

assign newSel3_cast_fu_304_p1 = newSel3_fu_296_p3;

assign newSel3_fu_296_p3 = ((or_cond_fu_278_p2[0:0] === 1'b1) ? newSel_fu_270_p3 : newSel1_fu_284_p3);

assign newSel_fu_270_p3 = ((sel_tmp7_fu_265_p2[0:0] === 1'b1) ? 2'd1 : 2'd3);

assign or_cond2_fu_291_p2 = (tmp_s_fu_239_p2 | tmp_1_reg_336);

assign or_cond4_fu_308_p2 = (or_cond_fu_278_p2 | or_cond2_fu_291_p2);

assign or_cond_fu_278_p2 = (sel_tmp7_fu_265_p2 | sel_tmp2_fu_250_p2);

assign p_sum_1_fu_131_p3 = ((tmp_8_fu_119_p2[0:0] === 1'b1) ? sum_fu_125_p2 : sum_1_reg_95);

assign sel_tmp1_fu_245_p2 = (tmp_1_reg_336 ^ 1'd1);

assign sel_tmp2_fu_250_p2 = (tmp_3_reg_344 & sel_tmp1_fu_245_p2);

assign sel_tmp6_demorgan_fu_255_p2 = (tmp_3_reg_344 | tmp_1_reg_336);

assign sel_tmp6_fu_259_p2 = (sel_tmp6_demorgan_fu_255_p2 ^ 1'd1);

assign sel_tmp7_fu_265_p2 = (tmp_5_reg_350 & sel_tmp6_fu_259_p2);

assign sum_fu_125_p2 = (sum_1_reg_95 + 32'd1);

assign tmp_1_fu_165_p2 = (($signed(abs_fu_157_p3) < $signed(32'd5001)) ? 1'b1 : 1'b0);

assign tmp_2_fu_171_p2 = ($signed(32'd4294906976) + $signed(sum_1_reg_95));

assign tmp_3_fu_197_p2 = (($signed(abs1_fu_189_p3) < $signed(32'd5001)) ? 1'b1 : 1'b0);

assign tmp_4_fu_203_p2 = ($signed(32'd4294890499) + $signed(sum_1_reg_95));

assign tmp_5_fu_229_p2 = (($signed(abs2_fu_221_p3) < $signed(32'd5001)) ? 1'b1 : 1'b0);

assign tmp_6_fu_235_p1 = sum_1_reg_95[30:0];

assign tmp_8_fu_119_p2 = ((p_src_data_stream_V_dout < 8'd10) ? 1'b1 : 1'b0);

assign tmp_fu_139_p2 = ($signed(32'd4294934446) + $signed(sum_1_reg_95));

assign tmp_s_fu_239_p2 = (($signed(sum_1_reg_95) < $signed(32'd10000)) ? 1'b1 : 1'b0);

endmodule //segment
