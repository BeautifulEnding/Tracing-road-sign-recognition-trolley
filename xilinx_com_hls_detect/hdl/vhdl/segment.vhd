-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity segment is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_V_read : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of segment is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv20_E1000 : STD_LOGIC_VECTOR (19 downto 0) := "11100001000000000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv32_FFFF7FAE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110111111110101110";
    constant ap_const_lv32_8052 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000001010010";
    constant ap_const_lv32_1389 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001110001001";
    constant ap_const_lv32_FFFF1460 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110001010001100000";
    constant ap_const_lv32_EBA0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001110101110100000";
    constant ap_const_lv32_FFFED403 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111101101010000000011";
    constant ap_const_lv32_12BFD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010010101111111101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2710 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011100010000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_322 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_84 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum_1_reg_95 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_113_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal p_sum_1_fu_131_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_336 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_3_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_344 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_350 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal tmp_8_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs_fu_157_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond1_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg9_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs1_fu_189_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond2_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg1_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs2_fu_221_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sel_tmp1_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_270_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal newSel1_fu_284_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal newSel3_fu_296_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_cond2_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel3_cast_fu_304_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_fu_235_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_107_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_84 <= indvar_flatten_next_fu_113_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_84 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    sum_1_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_322 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                sum_1_reg_95 <= p_sum_1_fu_131_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_1_reg_95 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_322 <= exitcond_flatten_fu_107_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_1_reg_336 <= tmp_1_fu_165_p2;
                tmp_3_reg_344 <= tmp_3_fu_197_p2;
                tmp_5_reg_350 <= tmp_5_fu_229_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_107_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten_fu_107_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten_fu_107_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    abs1_fu_189_p3 <= 
        tmp_2_fu_171_p2 when (abscond1_fu_183_p2(0) = '1') else 
        neg9_fu_177_p2;
    abs2_fu_221_p3 <= 
        tmp_4_fu_203_p2 when (abscond2_fu_215_p2(0) = '1') else 
        neg1_fu_209_p2;
    abs_fu_157_p3 <= 
        tmp_fu_139_p2 when (abscond_fu_151_p2(0) = '1') else 
        neg_fu_145_p2;
    abscond1_fu_183_p2 <= "1" when (signed(tmp_2_fu_171_p2) > signed(ap_const_lv32_0)) else "0";
    abscond2_fu_215_p2 <= "1" when (signed(tmp_4_fu_203_p2) > signed(ap_const_lv32_0)) else "0";
    abscond_fu_151_p2 <= "1" when (signed(tmp_fu_139_p2) > signed(ap_const_lv32_0)) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(p_src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_322)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond_flatten_reg_322 = ap_const_lv1_0) and (p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_322)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond_flatten_reg_322 = ap_const_lv1_0) and (p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(p_src_data_stream_V_empty_n, exitcond_flatten_reg_322)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten_reg_322 = ap_const_lv1_0) and (p_src_data_stream_V_empty_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_107_p2)
    begin
        if ((exitcond_flatten_fu_107_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        newSel3_cast_fu_304_p1 when (or_cond4_fu_308_p2(0) = '1') else 
        tmp_6_fu_235_p1;
    exitcond_flatten_fu_107_p2 <= "1" when (indvar_flatten_reg_84 = ap_const_lv20_E1000) else "0";
    indvar_flatten_next_fu_113_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_84) + unsigned(ap_const_lv20_1));
    neg1_fu_209_p2 <= std_logic_vector(unsigned(ap_const_lv32_12BFD) - unsigned(sum_1_reg_95));
    neg9_fu_177_p2 <= std_logic_vector(unsigned(ap_const_lv32_EBA0) - unsigned(sum_1_reg_95));
    neg_fu_145_p2 <= std_logic_vector(unsigned(ap_const_lv32_8052) - unsigned(sum_1_reg_95));
    newSel1_fu_284_p3 <= 
        ap_const_lv2_2 when (tmp_1_reg_336(0) = '1') else 
        ap_const_lv2_0;
    newSel3_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSel3_fu_296_p3),31));
    newSel3_fu_296_p3 <= 
        newSel_fu_270_p3 when (or_cond_fu_278_p2(0) = '1') else 
        newSel1_fu_284_p3;
    newSel_fu_270_p3 <= 
        ap_const_lv2_1 when (sel_tmp7_fu_265_p2(0) = '1') else 
        ap_const_lv2_3;
    or_cond2_fu_291_p2 <= (tmp_s_fu_239_p2 or tmp_1_reg_336);
    or_cond4_fu_308_p2 <= (or_cond_fu_278_p2 or or_cond2_fu_291_p2);
    or_cond_fu_278_p2 <= (sel_tmp7_fu_265_p2 or sel_tmp2_fu_250_p2);

    p_src_data_stream_V_blk_n_assign_proc : process(p_src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_322)
    begin
        if (((exitcond_flatten_reg_322 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_data_stream_V_blk_n <= p_src_data_stream_V_empty_n;
        else 
            p_src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_322, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_322 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_data_stream_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    p_sum_1_fu_131_p3 <= 
        sum_fu_125_p2 when (tmp_8_fu_119_p2(0) = '1') else 
        sum_1_reg_95;
    sel_tmp1_fu_245_p2 <= (tmp_1_reg_336 xor ap_const_lv1_1);
    sel_tmp2_fu_250_p2 <= (tmp_3_reg_344 and sel_tmp1_fu_245_p2);
    sel_tmp6_demorgan_fu_255_p2 <= (tmp_3_reg_344 or tmp_1_reg_336);
    sel_tmp6_fu_259_p2 <= (sel_tmp6_demorgan_fu_255_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_265_p2 <= (tmp_5_reg_350 and sel_tmp6_fu_259_p2);
    sum_fu_125_p2 <= std_logic_vector(unsigned(sum_1_reg_95) + unsigned(ap_const_lv32_1));
    tmp_1_fu_165_p2 <= "1" when (signed(abs_fu_157_p3) < signed(ap_const_lv32_1389)) else "0";
    tmp_2_fu_171_p2 <= std_logic_vector(signed(ap_const_lv32_FFFF1460) + signed(sum_1_reg_95));
    tmp_3_fu_197_p2 <= "1" when (signed(abs1_fu_189_p3) < signed(ap_const_lv32_1389)) else "0";
    tmp_4_fu_203_p2 <= std_logic_vector(signed(ap_const_lv32_FFFED403) + signed(sum_1_reg_95));
    tmp_5_fu_229_p2 <= "1" when (signed(abs2_fu_221_p3) < signed(ap_const_lv32_1389)) else "0";
    tmp_6_fu_235_p1 <= sum_1_reg_95(31 - 1 downto 0);
    tmp_8_fu_119_p2 <= "1" when (unsigned(p_src_data_stream_V_dout) < unsigned(ap_const_lv8_A)) else "0";
    tmp_fu_139_p2 <= std_logic_vector(signed(ap_const_lv32_FFFF7FAE) + signed(sum_1_reg_95));
    tmp_s_fu_239_p2 <= "1" when (signed(sum_1_reg_95) < signed(ap_const_lv32_2710)) else "0";
end behav;
