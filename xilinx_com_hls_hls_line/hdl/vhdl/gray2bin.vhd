-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gray2bin is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_V_read : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gray2bin is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_14 : STD_LOGIC_VECTOR (7 downto 0) := "00010100";
    constant ap_const_lv8_15 : STD_LOGIC_VECTOR (7 downto 0) := "00010101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_505 : STD_LOGIC_VECTOR (0 downto 0);
    signal x1_reg_107 : STD_LOGIC_VECTOR (31 downto 0);
    signal flag_reg_119 : STD_LOGIC_VECTOR (31 downto 0);
    signal flag2_reg_131 : STD_LOGIC_VECTOR (1 downto 0);
    signal x1_1_reg_143 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_176_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_480 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_1_cast2_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_1_cast2_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x1_1_cast2_reg_495_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_1_cast_fu_192_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal x1_1_cast_reg_500 : STD_LOGIC_VECTOR (11 downto 0);
    signal x1_1_cast_reg_500_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_505_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_505_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_505_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_202_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_s_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_514 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_520 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_520_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x1_2_fu_239_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_2_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_2_reg_525_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal flag_1_fu_246_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal flag_1_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_538 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_lshr_f_reg_558 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_cond4_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_reg_563 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_345_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_reg_574 : STD_LOGIC_VECTOR (0 downto 0);
    signal x1_4_fu_370_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal flag_3_fu_389_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal flag2_2_fu_400_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal flag2_2_reg_590 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal i_reg_96 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_phi_mux_x1_phi_fu_111_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_flag_phi_fu_123_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_flag2_phi_fu_135_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_3_fu_445_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal height_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal height_3_fu_431_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_x1_fu_226_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal flag_2_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_265_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_cast_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal notlhs_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_322_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_t_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_363_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_298_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sel_tmp6_fu_377_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sel_tmp6_cast_fu_385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp3_fu_396_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal height_1_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal height_2_fu_424_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_fu_438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_182_ap_start : STD_LOGIC;
    signal grp_fu_182_ap_done : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component hls_line_sdiv_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hls_line_sdiv_32neOg_U31 : component hls_line_sdiv_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_182_ap_start,
        done => grp_fu_182_ap_done,
        din0 => sum_fu_82,
        din1 => height_fu_86,
        ce => ap_const_logic_1,
        dout => grp_fu_182_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond3_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((exitcond3_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_return_preg <= grp_fu_182_p2;
                end if; 
            end if;
        end if;
    end process;


    flag2_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_505_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                flag2_reg_131 <= flag2_2_reg_590;
            elsif (((exitcond3_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                flag2_reg_131 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    flag_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_505_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                flag_reg_119 <= flag_3_fu_389_p3;
            elsif (((exitcond3_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                flag_reg_119 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    height_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_505_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                height_fu_86 <= height_3_fu_431_p3;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                height_fu_86 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_96 <= i_1_reg_480;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_96 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    sum_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_505_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_fu_82 <= sum_3_fu_445_p3;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_fu_82 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x1_1_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                x1_1_reg_143 <= j_fu_202_p2;
            elsif (((exitcond3_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x1_1_reg_143 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    x1_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_505_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                x1_reg_107 <= x1_4_fu_370_p3;
            elsif (((exitcond3_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x1_reg_107 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_505 <= exitcond_fu_196_p2;
                exitcond_reg_505_pp0_iter1_reg <= exitcond_reg_505;
                    x1_1_cast2_reg_495(10 downto 0) <= x1_1_cast2_fu_188_p1(10 downto 0);
                    x1_1_cast2_reg_495_pp0_iter1_reg(10 downto 0) <= x1_1_cast2_reg_495(10 downto 0);
                    x1_1_cast_reg_500(10 downto 0) <= x1_1_cast_fu_192_p1(10 downto 0);
                    x1_1_cast_reg_500_pp0_iter1_reg(10 downto 0) <= x1_1_cast_reg_500(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_reg_505_pp0_iter2_reg <= exitcond_reg_505_pp0_iter1_reg;
                exitcond_reg_505_pp0_iter3_reg <= exitcond_reg_505_pp0_iter2_reg;
                notrhs_reg_520_pp0_iter2_reg <= notrhs_reg_520;
                x1_2_reg_525_pp0_iter3_reg <= x1_2_reg_525;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_505_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                flag2_2_reg_590 <= flag2_2_fu_400_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_505_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                flag_1_reg_532 <= flag_1_fu_246_p3;
                p_lshr_f_reg_558 <= tmp_5_fu_274_p2(31 downto 1);
                tmp_11_reg_553 <= tmp_5_fu_274_p2(31 downto 31);
                tmp_2_reg_538 <= tmp_2_fu_253_p2;
                tmp_3_reg_543 <= tmp_3_fu_259_p2;
                tmp_5_reg_548 <= tmp_5_fu_274_p2;
                x1_2_reg_525 <= x1_2_fu_239_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_480 <= i_1_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_505 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                notrhs_reg_520 <= notrhs_fu_214_p2;
                tmp_s_reg_514 <= tmp_s_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_505_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_cond4_reg_563 <= or_cond4_fu_312_p2;
                sel_tmp1_reg_574 <= sel_tmp1_fu_358_p2;
                tmp_6_reg_569 <= tmp_6_fu_345_p3;
            end if;
        end if;
    end process;
    x1_1_cast2_reg_495(31 downto 11) <= "000000000000000000000";
    x1_1_cast2_reg_495_pp0_iter1_reg(31 downto 11) <= "000000000000000000000";
    x1_1_cast_reg_500(11) <= '0';
    x1_1_cast_reg_500_pp0_iter1_reg(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, exitcond3_fu_170_p2, ap_CS_fsm_state2, exitcond_fu_196_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_196_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_196_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state43 <= ap_CS_fsm(38);
    ap_CS_fsm_state8 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(p_src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_reg_505)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond_reg_505 = ap_const_lv1_0) and (p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_reg_505)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond_reg_505 = ap_const_lv1_0) and (p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_src_data_stream_V_empty_n, exitcond_reg_505)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((exitcond_reg_505 = ap_const_lv1_0) and (p_src_data_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_196_p2)
    begin
        if ((exitcond_fu_196_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_flag2_phi_fu_135_p4_assign_proc : process(ap_block_pp0_stage0, flag2_reg_131, exitcond_reg_505_pp0_iter3_reg, flag2_2_reg_590, ap_enable_reg_pp0_iter4)
    begin
        if (((exitcond_reg_505_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_flag2_phi_fu_135_p4 <= flag2_2_reg_590;
        else 
            ap_phi_mux_flag2_phi_fu_135_p4 <= flag2_reg_131;
        end if; 
    end process;


    ap_phi_mux_flag_phi_fu_123_p4_assign_proc : process(ap_block_pp0_stage0, flag_reg_119, exitcond_reg_505_pp0_iter2_reg, ap_enable_reg_pp0_iter3, flag_3_fu_389_p3)
    begin
        if (((exitcond_reg_505_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_flag_phi_fu_123_p4 <= flag_3_fu_389_p3;
        else 
            ap_phi_mux_flag_phi_fu_123_p4 <= flag_reg_119;
        end if; 
    end process;


    ap_phi_mux_x1_phi_fu_111_p4_assign_proc : process(ap_block_pp0_stage0, x1_reg_107, exitcond_reg_505_pp0_iter2_reg, x1_4_fu_370_p3, ap_enable_reg_pp0_iter3)
    begin
        if (((exitcond_reg_505_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_x1_phi_fu_111_p4 <= x1_4_fu_370_p3;
        else 
            ap_phi_mux_x1_phi_fu_111_p4 <= x1_reg_107;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_fu_182_p2, ap_return_preg, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            ap_return <= grp_fu_182_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    exitcond3_fu_170_p2 <= "1" when (i_reg_96 = ap_const_lv10_2D0) else "0";
    exitcond_fu_196_p2 <= "1" when (x1_1_reg_143 = ap_const_lv11_500) else "0";
    flag2_2_fu_400_p3 <= 
        ap_phi_mux_flag2_phi_fu_135_p4 when (or_cond4_fu_312_p2(0) = '1') else 
        sel_tmp3_fu_396_p1;
    flag_1_fu_246_p3 <= 
        flag_2_fu_233_p2 when (tmp_s_reg_514(0) = '1') else 
        ap_phi_mux_flag_phi_fu_123_p4;
    flag_2_fu_233_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_flag_phi_fu_123_p4));
    flag_3_fu_389_p3 <= 
        flag_1_reg_532 when (or_cond4_fu_312_p2(0) = '1') else 
        sel_tmp6_cast_fu_385_p1;

    grp_fu_182_ap_start_assign_proc : process(exitcond3_fu_170_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond3_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_182_ap_start <= ap_const_logic_1;
        else 
            grp_fu_182_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    height_1_fu_418_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(height_fu_86));
    height_2_fu_424_p3 <= 
        height_1_fu_418_p2 when (sel_tmp1_reg_574(0) = '1') else 
        height_fu_86;
    height_3_fu_431_p3 <= 
        height_fu_86 when (or_cond4_reg_563(0) = '1') else 
        height_2_fu_424_p3;
    i_1_fu_176_p2 <= std_logic_vector(unsigned(i_reg_96) + unsigned(ap_const_lv10_1));
    j_0_x1_fu_226_p3 <= 
        x1_1_cast2_reg_495_pp0_iter1_reg when (tmp_1_fu_220_p2(0) = '1') else 
        ap_phi_mux_x1_phi_fu_111_p4;
    j_fu_202_p2 <= std_logic_vector(unsigned(x1_1_reg_143) + unsigned(ap_const_lv11_1));
    notlhs_fu_301_p2 <= "0" when (ap_phi_mux_flag2_phi_fu_135_p4 = ap_const_lv2_0) else "1";
    notrhs_fu_214_p2 <= "1" when (unsigned(p_src_data_stream_V_dout) < unsigned(ap_const_lv8_15)) else "0";
    or_cond4_fu_312_p2 <= (tmp1_fu_307_p2 or notrhs_reg_520_pp0_iter2_reg);
    p_lshr_fu_322_p4 <= p_neg_fu_317_p2(31 downto 1);
    p_neg_fu_317_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_5_reg_548));
    p_neg_t_fu_336_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_9_fu_332_p1));

    p_src_data_stream_V_blk_n_assign_proc : process(p_src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_505)
    begin
        if (((exitcond_reg_505 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_data_stream_V_blk_n <= p_src_data_stream_V_empty_n;
        else 
            p_src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_505, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_505 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_src_data_stream_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_fu_358_p2 <= (tmp_3_reg_543 and sel_tmp_fu_352_p2);
    sel_tmp2_fu_363_p3 <= 
        x1_2_reg_525 when (sel_tmp1_fu_358_p2(0) = '1') else 
        ap_const_lv32_0;
    sel_tmp3_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sel_tmp1_fu_358_p2),2));
    sel_tmp6_cast_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sel_tmp6_fu_377_p3),32));
    sel_tmp6_fu_377_p3 <= 
        tmp_fu_298_p1 when (sel_tmp1_fu_358_p2(0) = '1') else 
        ap_const_lv31_0;
    sel_tmp_fu_352_p2 <= (or_cond4_fu_312_p2 xor ap_const_lv1_1);
    sum_1_fu_412_p2 <= std_logic_vector(unsigned(sum_fu_82) + unsigned(tmp2_fu_408_p2));
    sum_2_fu_438_p3 <= 
        sum_1_fu_412_p2 when (sel_tmp1_reg_574(0) = '1') else 
        sum_fu_82;
    sum_3_fu_445_p3 <= 
        sum_fu_82 when (or_cond4_reg_563(0) = '1') else 
        sum_2_fu_438_p3;
    tmp1_fu_307_p2 <= (tmp_2_reg_538 or notlhs_fu_301_p2);
    tmp2_fu_408_p2 <= std_logic_vector(unsigned(tmp_6_reg_569) + unsigned(x1_2_reg_525_pp0_iter3_reg));
    tmp_10_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_reg_558),32));
    tmp_1_fu_220_p2 <= "1" when (ap_phi_mux_x1_phi_fu_111_p4 = ap_const_lv32_0) else "0";
    tmp_2_fu_253_p2 <= "1" when (x1_2_fu_239_p3 = ap_const_lv32_0) else "0";
    tmp_3_fu_259_p2 <= "1" when (signed(flag_1_fu_246_p3) > signed(ap_const_lv32_5)) else "0";
        tmp_4_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_265_p2),32));

    tmp_4_fu_265_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(x1_1_cast_reg_500_pp0_iter1_reg));
    tmp_5_fu_274_p2 <= std_logic_vector(signed(tmp_4_cast_fu_270_p1) - signed(x1_2_fu_239_p3));
    tmp_6_fu_345_p3 <= 
        p_neg_t_fu_336_p2 when (tmp_11_reg_553(0) = '1') else 
        tmp_10_fu_342_p1;
    tmp_9_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_fu_322_p4),32));
    tmp_fu_298_p1 <= flag_1_reg_532(31 - 1 downto 0);
    tmp_s_fu_208_p2 <= "1" when (unsigned(p_src_data_stream_V_dout) < unsigned(ap_const_lv8_14)) else "0";
    x1_1_cast2_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x1_1_reg_143),32));
    x1_1_cast_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x1_1_reg_143),12));
    x1_2_fu_239_p3 <= 
        j_0_x1_fu_226_p3 when (tmp_s_reg_514(0) = '1') else 
        ap_phi_mux_x1_phi_fu_111_p4;
    x1_4_fu_370_p3 <= 
        x1_2_reg_525 when (or_cond4_fu_312_p2(0) = '1') else 
        sel_tmp2_fu_363_p3;
end behav;
